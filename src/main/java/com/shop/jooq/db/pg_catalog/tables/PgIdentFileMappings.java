/*
 * This file is generated by jOOQ.
 */
package com.shop.jooq.db.pg_catalog.tables;


import com.shop.jooq.db.pg_catalog.PgCatalog;
import com.shop.jooq.db.pg_catalog.tables.records.PgIdentFileMappingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgIdentFileMappings extends TableImpl<PgIdentFileMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ident_file_mappings</code>
     */
    public static final PgIdentFileMappings PG_IDENT_FILE_MAPPINGS = new PgIdentFileMappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgIdentFileMappingsRecord> getRecordType() {
        return PgIdentFileMappingsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ident_file_mappings.line_number</code>.
     */
    public final TableField<PgIdentFileMappingsRecord, Integer> LINE_NUMBER = createField(DSL.name("line_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_ident_file_mappings.map_name</code>.
     */
    public final TableField<PgIdentFileMappingsRecord, String> MAP_NAME = createField(DSL.name("map_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ident_file_mappings.sys_name</code>.
     */
    public final TableField<PgIdentFileMappingsRecord, String> SYS_NAME = createField(DSL.name("sys_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ident_file_mappings.pg_username</code>.
     */
    public final TableField<PgIdentFileMappingsRecord, String> PG_USERNAME = createField(DSL.name("pg_username"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_ident_file_mappings.error</code>.
     */
    public final TableField<PgIdentFileMappingsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    private PgIdentFileMappings(Name alias, Table<PgIdentFileMappingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgIdentFileMappings(Name alias, Table<PgIdentFileMappingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_ident_file_mappings\" as  SELECT a.line_number,\n    a.map_name,\n    a.sys_name,\n    a.pg_username,\n    a.error\n   FROM pg_ident_file_mappings() a(line_number, map_name, sys_name, pg_username, error);"));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ident_file_mappings</code> table
     * reference
     */
    public PgIdentFileMappings(String alias) {
        this(DSL.name(alias), PG_IDENT_FILE_MAPPINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ident_file_mappings</code> table
     * reference
     */
    public PgIdentFileMappings(Name alias) {
        this(alias, PG_IDENT_FILE_MAPPINGS);
    }

    /**
     * Create a <code>pg_catalog.pg_ident_file_mappings</code> table reference
     */
    public PgIdentFileMappings() {
        this(DSL.name("pg_ident_file_mappings"), null);
    }

    public <O extends Record> PgIdentFileMappings(Table<O> child, ForeignKey<O, PgIdentFileMappingsRecord> key) {
        super(child, key, PG_IDENT_FILE_MAPPINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgIdentFileMappings as(String alias) {
        return new PgIdentFileMappings(DSL.name(alias), this);
    }

    @Override
    public PgIdentFileMappings as(Name alias) {
        return new PgIdentFileMappings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgIdentFileMappings rename(String name) {
        return new PgIdentFileMappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgIdentFileMappings rename(Name name) {
        return new PgIdentFileMappings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
